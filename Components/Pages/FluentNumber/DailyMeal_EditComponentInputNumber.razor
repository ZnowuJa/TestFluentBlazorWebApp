
<h3>DailyMeal_EditComponent with InputNumber</h3>
<div @onmousedown="HandleClick">
    <table class="table-container">
        <thead>
            <tr class="table-caption">
                <th style="text-align: left; border-right: none; font-size: large;" colspan="7">
                    Meals:
                    <FluentIcon Id="MealsInfoId"
                    Value="@(new Icons.Regular.Size16.Info())"
                    Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                </th>
                <th style="text-align: right; border-left: none; font-size: large;" colspan="1">
                    <FluentIcon Id="MealsInfoPictureId" Value="@(new Icons.Regular.Size24.SpatulaSpoon())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" />
                </th>
            </tr>
            <tr class="table-header-left">
                <th>Stage</th>
                <th>Country</th>
                <th>Breakfasts</th>
                <th>Lunches</th>
                <th>Dinners</th>
                <th>Cash <FluentIcon Id="MealsTotalDeductionId" Value="@(new Icons.Regular.Size16.Info())" Color="Microsoft.FluentUI.AspNetCore.Components.Color.Fill" /></th>
                <th>Currency</th>
                <th>Max days</th>
            </tr>
        </thead>
        <tbody>
            @{
                var mealId = 0;
            }
            @foreach (var meal in _content)
            {
                mealId++;
                var breakId = $"break_{mealId}";
                var lunchId = $"lunch_{mealId}";
                var dinnerId = $"dinner_{mealId}";
                @if (meal.Duration > 0)
                {
                    <tr>
                        <td>@meal.StageId</td>
                        <td>@meal.CountryName</td>
                        <td>
                            <div style="min-width: 100px;">
                                <InputNumber Id="@breakId"
                                Min="0"
                                Max="@meal.Duration.ToString()"
                                @bind-Value:get="@meal.CoveredBreakfasts"
                                @bind-Value:set="(value => HandleMealChanged(meal, value, nameof(meal.CoveredBreakfasts)))" />
                            </div>
                        </td>
                        <td>
                            <div style="min-width: 100px;">
                                <InputNumber Id="@lunchId"
                                Min="0"
                                Max="@meal.Duration.ToString()"
                                @bind-Value:get="@meal.CoveredLunches"
                                @bind-Value:set="(value => HandleMealChanged(meal, value, nameof(meal.CoveredLunches)))" />
                            </div>
                        </td>
                        <td>
                            <div style="min-width: 100px;">
                                <InputNumber Id="@dinnerId"
                                Min="0"
                                Max="@meal.Duration.ToString()"
                                @bind-Value:get="@meal.CoveredDinners"
                                @bind-Value:set="(value => HandleMealChanged(meal, value, nameof(meal.CoveredDinners)))" />
                            </div>
                        </td>
                        <td>@meal.Total</td>
                        <td>@meal.AllowanceRateCurrency</td>
                        <td>@meal.Duration</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
MethodCallsCounter: @methodCallsCounter  |  MouseClicks: @mouseClicksCount

@code {
    [Parameter] public List<DailyMeal> _content { get; set; }
    [Parameter] public EventCallback<List<DailyMeal>> OnDailyMealChanged { get; set; }
    private Timer _debounceTimer;
    private int methodCallsCounter = 0;
    private int mouseClicksCount = 0;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(_content.Count);
        StateHasChanged();
    }
    private void HandleClick(MouseEventArgs e)
    {
        mouseClicksCount++;
    }
    private async Task HandleMealChanged(DailyMeal m, int v, string p)
    {
        methodCallsCounter++;
        
        var property = m.GetType().GetProperty(p);
        if (property != null && property.CanWrite)
        {
            var currentValue = (int)property.GetValue(m);
            if (currentValue != v)
            {
                property.SetValue(m, v);
                await OnDailyMealChanged.InvokeAsync(_content);
            }
            
        }
        
    }
   }